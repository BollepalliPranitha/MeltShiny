install.packages("lintr")
clear
library(lintr)
df = df.abs.data
library(MeltR)
df = df.abs.data
helix = c("RNA", "CGAAAGGU", "ACCUUUCG")
ggplot(df %>% filter(Sample == 10), #Only plot sample 10
aes(x = Temperature, y = Absorbance, color = factor(Sample))) +
geom_point() +
theme_classic() +
geom_vline(xintercept = c(15, 70)) #will add horizontal lines to the plot at 15 and 70
fit = meltR.A(data_frame = df,
blank = 1,
NucAcid = helix,
Mmodel = "Heteroduplex.2State")
fit
fit
plot(fit)
View(fit)
type(fit)
Type(fit)
typeof(fit)
$Method.1.indvfits
fir
fit
$Method.3.fit
fit$Method.1.indvfits
shiny::runApp('TestAppendTabs')
library(shiny); runApp('MeltShinyRepo/MeltWin2.0/MeltShiny.R')
library(shiny); runApp('MeltShinyRepo/MeltWin2.0/MeltShiny.R')
library(shiny); runApp('MeltShinyRepo/MeltWin2.0/MeltShiny.R')
library(shiny); runApp('Temp/MeltShiny.R')
library(shiny); runApp('MeltShinyRepo/MeltWin2.0/MeltShiny.R')
library(shiny); runApp('MeltShinyRepo/MeltWin2.0/MeltShiny.R')
runApp('MeltShinyRepo/MeltWin2.0/MeltShiny.R')
runApp('MeltShinyRepo/MeltWin2.0/MeltShiny.R')
runApp('MeltShinyRepo/MeltWin2.0/MeltShiny.R')
runApp('MeltShinyRepo/MeltWin2.0/MeltShiny.R')
library(shiny); runApp('MeltShinyRepo/MeltWin2.0/MeltShiny.R')
runApp('MeltShinyRepo/MeltWin2.0/MeltShiny.R')
library(shiny); runApp('C:/Users/shlok/Desktop/Demo/Demo.R')
library(shiny); runApp('C:/Users/shlok/Desktop/Demo/Demo.R')
runApp('C:/Users/shlok/Desktop/Demo/Demo.R')
runApp('C:/Users/shlok/Desktop/Demo/Demo.R')
df = df.abs.data
library(MeltR)
df = df.abs.data
ggplot(df, aes(x = Temperature, y = Absorbance, color = factor(Sample))) +
geom_point() +
theme_classic()
helix = c("RNA", "CGAAAGGU", "ACCUUUCG")
meltR.A(data_frame = df,
blank = 1,
NucAcid = helix,
Mmodel = "Heteroduplex.2State")
meltR.A(data_frame = df.FAM.C.BHQ1.data,
blank = "none",
NucAcid = c("RNA", "CUGAGUC", "GACUCAG"),
Mmodel = "Heteroduplex.2State")
library(shiny); runApp('C:/Users/shlok/Desktop/Demo/Demo.R')
runApp('C:/Users/shlok/Desktop/Demo/Demo.R')
runApp('C:/Users/shlok/Desktop/Demo/Demo.R')
shiny::runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('ShinyTut')
runApp('ShinyTut')
runApp('ShinyTut')
runApp('ShinyTut')
shiny::runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
shiny::runApp('MeltWin2.0')
runApp('MeltWin2.0')
shiny::runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
shiny::runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
library(shinyjs)
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
shiny::runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
shiny::runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
shiny::runApp('MeltWin2.0')
runApp('MeltWin2.0')
shiny::runApp('MeltWin2.0')
runApp('MeltWin2.0')
shiny::runApp('MeltWin2.0')
x %in% vec
# declaring a vector
vec <- c(" d")
# elements x and y to check in the vector
x <- " d"
# check if the element x specified is present
# in the vector
print ("Check for x element")
x %in% vec
# elements x and y to check in the vector
x <- " "
x %in% vec
testPath <- c(" d")
for (i in 1:length(testPath)){
for (j in i){
if (is.integer(i) && nzchar(j)){
pathlengths <- testPath
}
}
}
testPath <- c(" d")
testPath <- c(" d")
for (i in 1:length(testPath)){
print(i)
#for (j in i){
#  if (is.integer(i) && nzchar(j)){
#    pathlengths <- testPath
#  }
#}
}
testPath <- c(" d")
for (i in 1:length(testPath)){
element <- testPath[i]
for (j in element){
if (is.integer(element) && nzchar(j)){
pathlengths <- testPath
print("Yes")
}
}
}
testPath <- c("d")
for (i in 1:length(testPath)){
element <- testPath[i]
for (j in element){
if (is.integer(element) && nzchar(j)){
pathlengths <- testPath
print("Yes")
}
}
}
for (i in 1:length(testPath)){
element <- testPath[i]
print(element)
#for (j in element){
#  if (is.integer(element) && nzchar(j)){
#    pathlengths <- testPath
#    print("Yes")
#  }
#}
}
testPath <- c("d")
for (i in 1:length(testPath)){
element <- testPath[i]
for (j in element){
print(j)
#  if (is.integer(element) && nzchar(j)){
#    pathlengths <- testPath
#    print("Yes")
#  }
}
}
testPath <- c("d")
for (i in 1:length(testPath)){
element <- testPath[i]
for (j in element){
print(is.integer(element))
print(nzchar(j))
#if (is.integer(element) && nzchar(j)){
#  pathlengths <- testPath
#  print("Yes")
#}
}
}
testPath <- c(" d")
for (i in 1:length(testPath)){
element <- testPath[i]
for (j in element){
print(is.integer(element))
print(nzchar(j))
#if (is.integer(element) && nzchar(j)){
#  pathlengths <- testPath
#  print("Yes")
#}
}
}
#print(is.integer(element))
#print(nzchar(j))
#if (is.integer(element) && nzchar(j)){
#  pathlengths <- testPath
#  print("Yes")
#}
}
testPath <- c(" d")
for (i in 1:length(testPath)){
element <- testPath[i]
for (j in element){
print(j)
#print(is.integer(element))
#print(nzchar(j))
#if (is.integer(element) && nzchar(j)){
#  pathlengths <- testPath
#  print("Yes")
#}
}
}
testPath <- c(" d")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- strsplit(element, "")
for (j in chars){
print(j)
#print(is.integer(element))
#print(nzchar(j))
#if (is.integer(element) && nzchar(j)){
#  pathlengths <- testPath
#  print("Yes")
#}
}
}
print(is.integer(element))
testPath <- c(" d")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- strsplit(element, "")
for (j in chars){
print(is.integer(element))
print(nzchar(j))
#if (is.integer(element) && nzchar(j)){
#  pathlengths <- testPath
#  print("Yes")
#}
}
}
testPath <- c(" d")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- strsplit(element, "")
if(is.integer(element) && "" %!in% chars){
print("Yes")
}
}
testPath <- c("d")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- strsplit(element, "")
if(is.integer(element) && "" %!in% chars){
print("Yes")
}
}
testPath <- c("d")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- strsplit(element, "")
print(is.integer(element))
print( "" %in% chars)
#if(is.integer(element) && "" %!in% chars){
#  print("Yes")
#}
}
testPath <- c(" d")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- strsplit(element, "")
print(is.integer(element))
print( "" %in% chars)
#if(is.integer(element) && "" %!in% chars){
#  print("Yes")
#}
}
testPath <- c(" d")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- strsplit(element, "")
print(is.integer(element))
print( "d" %in% chars)
#if(is.integer(element) && "" %!in% chars){
#  print("Yes")
#}
}
print(chars)
print(chars[1])
print(chars[2])
testPath <- c(" d")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
print(is.integer(element))
print("d" %!in% chars)
#if(is.integer(element) && "" %!in% chars){
#  print("Yes")
#}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
print(is.integer(element))
print("d" %in% chars)
#if(is.integer(element) && "" %!in% chars){
#  print("Yes")
#}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
print(is.integer(element))
print(" " %in% chars)
#if(is.integer(element) && "" %!in% chars){
#  print("Yes")
#}
}
testPath <- c("1")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
if(is.integer(element) && (" " %in% chars) == FALSE){
print("Yes")
}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
print(chars)
#if(is.integer(element) && (" " %in% chars) == FALSE){
#  print("Yes")
#}
}
testPath <- c("1")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
if(is.integer(as.numeric(element)) && (" " %in% chars) == FALSE){
print("Yes")
}
}
testPath <- c("1")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
print(as.numeric(element))
#if(is.integer(as.numeric(element)) && (" " %in% chars) == FALSE){
#  print("Yes")
#}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
#print(as.numeric(element))
if(is.integer(as.numeric(element)) && (" " %in% chars) == FALSE){
print("Yes")
}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
#print(as.numeric(element))
if((" " %in% chars) == FALSE){
print("Yes")
}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
#print(as.numeric(element))
if(is.integer(as.numeric(element)) && (" " %in% chars) == FALSE){
print("Yes")
}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
#print(as.numeric(element))
print(is.integer(as.numeric(element)))
#if(is.integer(as.numeric(element)) && (" " %in% chars) == FALSE){
#  print("Yes")
#}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
#print(as.numeric(element))
print(is.numeric(as.numeric(element)))
#if(is.integer(as.numeric(element)) && (" " %in% chars) == FALSE){
#  print("Yes")
#}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
if(is.integer(as.numeric(element)) && (" " %in% chars) == FALSE){
print("Yes")
}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
if(is.numeric(as.numeric(element)) && (" " %in% chars) == FALSE){
print("Yes")
}
}
testPath <- c("f")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
if(is.numeric(as.numeric(element)) && (" " %in% chars) == FALSE){
print("Yes")
}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
if(is.numeric(as.numeric(element)) && (" " %in% chars) == FALSE){
print("Yes")
}
}
testPath <- c("f")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
if((chars %in% c("0","1","2","34","5","6","7","8","9"))
&& (" " %in% chars) == FALSE){
print("Yes")
}
}
testPath <- c("1,2,3")
testPath <- c("1,2,3")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
if((chars %in% c("0","1","2","34","5","6","7","8","9"))
&& (" " %in% chars) == FALSE){
print("Yes")
}
}
testPath <- c("1,2,3")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
for (j in chars){
if((j %in% c("0","1","2","34","5","6","7","8","9")) && (" " %in% chars) == FALSE){
print("Yes")
}
}
}
testPath <- c("1,2,3")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
for (j in chars){
print(j)
if((j %in% c("0","1","2","34","5","6","7","8","9")) && (" " %in% chars) == FALSE){
print("Yes")
}
}
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
print(chars)
}
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
print(chars)
}
testPath <- c("1","2","3")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
print(chars)
}
testPath <- c("1","2","3")
for (i in 1:length(testPath)){
element <- testPath[i]
chars <- c(unlist(strsplit(element, "")))
for (j in chars){
print(j)
if((j %in% c("0","1","2","34","5","6","7","8","9")) && (" " %in% chars) == FALSE){
print("Yes")
}
}
}
shiny::runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
runApp('MeltWin2.0')
